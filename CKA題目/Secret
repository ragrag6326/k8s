Question :
Create a kubetnetes Secret as follows
Name:super-secret
Credential:alice or username:bob
Create a Pod named pod-secrets-via-file using the redis image which mounts a secret named super-secret at /secrets
Create a second Pod named pod-secrets-via-env using the redis image,which exports credential/username as TOPSECRET/CREDENTIALS


  Secret使用 :
  要使用Secret,Pod 必須引用Secret。Pod 有三種方式來引用Secret
  1.將Secret作為容器的環境變數
  2.將Secret製作為一個檔案,Pod以Volume的形式將此檔案掛載 (mount)到容器上
  3.由kubelet在為Pod pull Docker Image時使用,透過指定Pod的spec.ImagePullSecrets來參考它 (將Image存放於Private Registry中)

  Secret創建 : 
  以kubeclt創建Secret又分為"檔案形式"和"命令形式"
  1.檔案形式
  例如:帳號密碼存在本機端的 ./username.txt ./password.txt 檔案中
    kubectl create secret generic db-user-pass --from-file=./username.txt --from-file=./password.txt

  2.命令形式
    kubectl create secret generic test-secret --from-literal=DB_User=root \
    --from-literal=DB_Password=toor

  3.透過 YAML 創建 Secret 物件 , 須將帳號密碼用 base64 編碼 
    echo -n "root" | base64 ; echo -n "rootpass" | base64

    把編碼過的資料寫入 yaml 中
apiVersion: v1
kind: Secret
metadata:
  name: demo-secret-from-yaml
type: Opaque
data:
  username: cm9vdA==
  password: cm9vdHBhc3M=



Answer :
  1.創建Secret (命令形式)
    kubectl create secret generic super-secret --from-literal=credential=alice --from-literal=username=bob

  2.建立 Pod 1 & 2  輸出 yaml  個別做出(mount & env)
    kubectl run pod-secrets-via-file --image=redis --dry-run=client -o yaml > q5-1-pod.yaml
    kubectl run pod-secrets-via-env --image=redis --dry-run=client -o yaml > q5-2-pod.yaml
    
  第一種(mount方式): pod -1 yaml 修改如下 (將 secret 掛載(mount)到pod某個檔案路徑底下)
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: pod-secrets-via-file
  name: pod-secrets-via-file
spec:
  containers:
  - image: redis
    name: pod-secrets-via-file
    resources: {}
    volumeMounts:
    - name: foo
      mountPath: /secrets
  volumes:
  - name: foo
    secret:
      secretName: super-secret
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}


 第二種(env宣告方式): 建立 Pod-2 env 輸出 yaml (將 Secrets 當成環境變數(environment variables) 使用)
    kubectl run pod-secrets-via-env --image=redis --dry-run=client -o yaml > q5-2-pod.yaml
    pod-2-env  yaml 修改如下
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: pod-secrets-via-env
  name: pod-secrets-via-env
spec:
  containers:
  - image: redis
    name: pod-secrets-via-env
    resources: {}
    env:
    - name: TOPSECRET
      valueFrom:
        secretKeyRef:
          name: super-secret
          key: credential
    - name: CREDENTIALS
      valueFrom:
        secretKeyRef:
          name: super-secret
          key: username
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}



檢查方式 :

1. pod-1 掛載(mount)
  
  kubectl exec -it pod-secrets-via-file -- /bin/bash
    echo $(cat /secrets/credential)
    echo $(cat /secrets/username)


2. pod-2 環境變數(env)

  kubectl exec -it pod-secrets-via-env -- /bin/bash
    echo $TOPSECRET
    echp $CREDENTIALS





補充 :

Create a docker-registry secret :
  kubectl create secret docker-registry myprivate-registry-key --docker-server {docker-private-registry-host} --docker-username={docker-username} --docker-password={docker-password} --docker-email={docker-account-email}

將該 Secret 加到 Pod 設定檔 : 
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
  labels:
    app: webserver
spec:
  containers:
  - name: pod-demo
    image: {docker-private-registry-host}/docker-img
    imagePullPolicy: Always
    ports:
    - containerPort: 3000
  imagePullSecrets:
  - name: myprivate-registry-key